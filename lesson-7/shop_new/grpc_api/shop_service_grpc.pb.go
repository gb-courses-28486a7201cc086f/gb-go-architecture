// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ItemRepositoryClient is the client API for ItemRepository service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ItemRepositoryClient interface {
	CreateItem(ctx context.Context, in *Item, opts ...grpc.CallOption) (*Item, error)
	UpdateItem(ctx context.Context, in *Item, opts ...grpc.CallOption) (*Item, error)
	DeleteItem(ctx context.Context, in *Item, opts ...grpc.CallOption) (*Empty, error)
	GetItem(ctx context.Context, in *ItemFilter, opts ...grpc.CallOption) (*Item, error)
	ListItems(ctx context.Context, in *ItemList, opts ...grpc.CallOption) (*ItemList, error)
}

type itemRepositoryClient struct {
	cc grpc.ClientConnInterface
}

func NewItemRepositoryClient(cc grpc.ClientConnInterface) ItemRepositoryClient {
	return &itemRepositoryClient{cc}
}

func (c *itemRepositoryClient) CreateItem(ctx context.Context, in *Item, opts ...grpc.CallOption) (*Item, error) {
	out := new(Item)
	err := c.cc.Invoke(ctx, "/grpc_api.ItemRepository/CreateItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemRepositoryClient) UpdateItem(ctx context.Context, in *Item, opts ...grpc.CallOption) (*Item, error) {
	out := new(Item)
	err := c.cc.Invoke(ctx, "/grpc_api.ItemRepository/UpdateItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemRepositoryClient) DeleteItem(ctx context.Context, in *Item, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/grpc_api.ItemRepository/DeleteItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemRepositoryClient) GetItem(ctx context.Context, in *ItemFilter, opts ...grpc.CallOption) (*Item, error) {
	out := new(Item)
	err := c.cc.Invoke(ctx, "/grpc_api.ItemRepository/GetItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemRepositoryClient) ListItems(ctx context.Context, in *ItemList, opts ...grpc.CallOption) (*ItemList, error) {
	out := new(ItemList)
	err := c.cc.Invoke(ctx, "/grpc_api.ItemRepository/ListItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ItemRepositoryServer is the server API for ItemRepository service.
// All implementations must embed UnimplementedItemRepositoryServer
// for forward compatibility
type ItemRepositoryServer interface {
	CreateItem(context.Context, *Item) (*Item, error)
	UpdateItem(context.Context, *Item) (*Item, error)
	DeleteItem(context.Context, *Item) (*Empty, error)
	GetItem(context.Context, *ItemFilter) (*Item, error)
	ListItems(context.Context, *ItemList) (*ItemList, error)
	mustEmbedUnimplementedItemRepositoryServer()
}

// UnimplementedItemRepositoryServer must be embedded to have forward compatible implementations.
type UnimplementedItemRepositoryServer struct {
}

func (UnimplementedItemRepositoryServer) CreateItem(context.Context, *Item) (*Item, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateItem not implemented")
}
func (UnimplementedItemRepositoryServer) UpdateItem(context.Context, *Item) (*Item, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateItem not implemented")
}
func (UnimplementedItemRepositoryServer) DeleteItem(context.Context, *Item) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteItem not implemented")
}
func (UnimplementedItemRepositoryServer) GetItem(context.Context, *ItemFilter) (*Item, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItem not implemented")
}
func (UnimplementedItemRepositoryServer) ListItems(context.Context, *ItemList) (*ItemList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListItems not implemented")
}
func (UnimplementedItemRepositoryServer) mustEmbedUnimplementedItemRepositoryServer() {}

// UnsafeItemRepositoryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ItemRepositoryServer will
// result in compilation errors.
type UnsafeItemRepositoryServer interface {
	mustEmbedUnimplementedItemRepositoryServer()
}

func RegisterItemRepositoryServer(s grpc.ServiceRegistrar, srv ItemRepositoryServer) {
	s.RegisterService(&ItemRepository_ServiceDesc, srv)
}

func _ItemRepository_CreateItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Item)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemRepositoryServer).CreateItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_api.ItemRepository/CreateItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemRepositoryServer).CreateItem(ctx, req.(*Item))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemRepository_UpdateItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Item)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemRepositoryServer).UpdateItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_api.ItemRepository/UpdateItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemRepositoryServer).UpdateItem(ctx, req.(*Item))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemRepository_DeleteItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Item)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemRepositoryServer).DeleteItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_api.ItemRepository/DeleteItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemRepositoryServer).DeleteItem(ctx, req.(*Item))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemRepository_GetItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemRepositoryServer).GetItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_api.ItemRepository/GetItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemRepositoryServer).GetItem(ctx, req.(*ItemFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemRepository_ListItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemRepositoryServer).ListItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_api.ItemRepository/ListItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemRepositoryServer).ListItems(ctx, req.(*ItemList))
	}
	return interceptor(ctx, in, info, handler)
}

// ItemRepository_ServiceDesc is the grpc.ServiceDesc for ItemRepository service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ItemRepository_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc_api.ItemRepository",
	HandlerType: (*ItemRepositoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateItem",
			Handler:    _ItemRepository_CreateItem_Handler,
		},
		{
			MethodName: "UpdateItem",
			Handler:    _ItemRepository_UpdateItem_Handler,
		},
		{
			MethodName: "DeleteItem",
			Handler:    _ItemRepository_DeleteItem_Handler,
		},
		{
			MethodName: "GetItem",
			Handler:    _ItemRepository_GetItem_Handler,
		},
		{
			MethodName: "ListItems",
			Handler:    _ItemRepository_ListItems_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shop_service.proto",
}

// OrderRepositoryClient is the client API for OrderRepository service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderRepositoryClient interface {
	CreateOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*Order, error)
	ListOrders(ctx context.Context, in *OrderFilter, opts ...grpc.CallOption) (*OrderList, error)
}

type orderRepositoryClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderRepositoryClient(cc grpc.ClientConnInterface) OrderRepositoryClient {
	return &orderRepositoryClient{cc}
}

func (c *orderRepositoryClient) CreateOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*Order, error) {
	out := new(Order)
	err := c.cc.Invoke(ctx, "/grpc_api.OrderRepository/CreateOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderRepositoryClient) ListOrders(ctx context.Context, in *OrderFilter, opts ...grpc.CallOption) (*OrderList, error) {
	out := new(OrderList)
	err := c.cc.Invoke(ctx, "/grpc_api.OrderRepository/ListOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderRepositoryServer is the server API for OrderRepository service.
// All implementations must embed UnimplementedOrderRepositoryServer
// for forward compatibility
type OrderRepositoryServer interface {
	CreateOrder(context.Context, *Order) (*Order, error)
	ListOrders(context.Context, *OrderFilter) (*OrderList, error)
	mustEmbedUnimplementedOrderRepositoryServer()
}

// UnimplementedOrderRepositoryServer must be embedded to have forward compatible implementations.
type UnimplementedOrderRepositoryServer struct {
}

func (UnimplementedOrderRepositoryServer) CreateOrder(context.Context, *Order) (*Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (UnimplementedOrderRepositoryServer) ListOrders(context.Context, *OrderFilter) (*OrderList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrders not implemented")
}
func (UnimplementedOrderRepositoryServer) mustEmbedUnimplementedOrderRepositoryServer() {}

// UnsafeOrderRepositoryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderRepositoryServer will
// result in compilation errors.
type UnsafeOrderRepositoryServer interface {
	mustEmbedUnimplementedOrderRepositoryServer()
}

func RegisterOrderRepositoryServer(s grpc.ServiceRegistrar, srv OrderRepositoryServer) {
	s.RegisterService(&OrderRepository_ServiceDesc, srv)
}

func _OrderRepository_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Order)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderRepositoryServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_api.OrderRepository/CreateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderRepositoryServer).CreateOrder(ctx, req.(*Order))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderRepository_ListOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderRepositoryServer).ListOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_api.OrderRepository/ListOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderRepositoryServer).ListOrders(ctx, req.(*OrderFilter))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderRepository_ServiceDesc is the grpc.ServiceDesc for OrderRepository service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderRepository_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc_api.OrderRepository",
	HandlerType: (*OrderRepositoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrder",
			Handler:    _OrderRepository_CreateOrder_Handler,
		},
		{
			MethodName: "ListOrders",
			Handler:    _OrderRepository_ListOrders_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shop_service.proto",
}
